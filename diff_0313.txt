diff --git a/srsRAN/lib/examples/pssch_ue.c b/srsRAN/lib/examples/pssch_ue.c
index 4903021..3bb88f3 100644
--- a/srsRAN/lib/examples/pssch_ue.c
+++ b/srsRAN/lib/examples/pssch_ue.c
@@ -312,7 +312,9 @@ int main(int argc, char** argv)
   ofdm_cfg.sf_type           = SRSRAN_SF_NORM;
   ofdm_cfg.freq_shift_f      = -0.5;
   for (int i = 0; i < prog_args.nof_rx_antennas; i++) {
-    ofdm_cfg.in_buffer  = rx_buffer[0];
+    for (int j = 0; j < SRSRAN_MAX_PORTS; j++) {
+      ofdm_cfg.in_buffer[j]  = rx_buffer[0];
+    }
     ofdm_cfg.out_buffer = sf_buffer[0];
 
     if (srsran_ofdm_rx_init_cfg(&fft[i], &ofdm_cfg)) {
diff --git a/srsRAN/lib/include/srsran/phy/dft/ofdm.h b/srsRAN/lib/include/srsran/phy/dft/ofdm.h
index eb69457..3b46489 100644
--- a/srsRAN/lib/include/srsran/phy/dft/ofdm.h
+++ b/srsRAN/lib/include/srsran/phy/dft/ofdm.h
@@ -115,10 +115,15 @@ SRSRAN_API int srsran_ofdm_rx_init_cfg(srsran_ofdm_t* q, srsran_ofdm_cfg_t* cfg)
 SRSRAN_API int srsran_ofdm_tx_init_cfg(srsran_ofdm_t* q, srsran_ofdm_cfg_t* cfg);
 
 SRSRAN_API int
-srsran_ofdm_rx_init_mbsfn(srsran_ofdm_t* q, srsran_cp_t cp_type, cf_t* in_buffer, cf_t* out_buffer, uint32_t max_prb);
+srsran_ofdm_rx_init_mbsfn(srsran_ofdm_t* q, srsran_cp_t cp_type, cf_t* in_buffer[SRSRAN_MAX_PORTS], cf_t* out_buffer, uint32_t max_prb);
 
 SRSRAN_API int
-srsran_ofdm_rx_init(srsran_ofdm_t* q, srsran_cp_t cp_type, cf_t* in_buffer, cf_t* out_buffer, uint32_t max_prb);
+// Frederik
+// original:
+// srsran_ofdm_rx_init(srsran_ofdm_t* q, srsran_cp_t cp_type, cf_t* in_buffer, cf_t* out_buffer, uint32_t max_prb);
+// new:
+srsran_ofdm_rx_init(srsran_ofdm_t* q, srsran_cp_t cp_type, cf_t* in_buffer[SRSRAN_MAX_PORTS], cf_t* out_buffer, uint32_t max_prb);
+//
 
 SRSRAN_API int srsran_ofdm_tx_set_prb(srsran_ofdm_t* q, srsran_cp_t cp, uint32_t nof_prb);
 
diff --git a/srsRAN/lib/src/phy/ch_estimation/test/chest_nbiot_test_dl.c b/srsRAN/lib/src/phy/ch_estimation/test/chest_nbiot_test_dl.c
index 46054d0..960a33b 100644
--- a/srsRAN/lib/src/phy/ch_estimation/test/chest_nbiot_test_dl.c
+++ b/srsRAN/lib/src/phy/ch_estimation/test/chest_nbiot_test_dl.c
@@ -166,10 +166,13 @@ int main(int argc, char** argv)
           fprintf(stderr, "Error initializing IFFT\n");
           return -1;
         }
-        if (srsran_ofdm_rx_init(&fft, cell.base.cp, sf_buffer, input, cell.base.nof_prb)) {
+        // Frederik
+        cf_t* sf_buffer_[SRSRAN_MAX_PORTS] = {sf_buffer, sf_buffer, sf_buffer, sf_buffer};
+        if (srsran_ofdm_rx_init(&fft, cell.base.cp, sf_buffer_, input, cell.base.nof_prb)) {
           fprintf(stderr, "Error initializing FFT\n");
           return -1;
         }
+        //
         srsran_ofdm_set_normalize(&ifft, true);
         srsran_ofdm_set_normalize(&fft, true);
       }
diff --git a/srsRAN/lib/src/phy/dft/ofdm.c b/srsRAN/lib/src/phy/dft/ofdm.c
index 9ddd0db..e2a7e1a 100644
--- a/srsRAN/lib/src/phy/dft/ofdm.c
+++ b/srsRAN/lib/src/phy/dft/ofdm.c
@@ -169,11 +169,22 @@ static int ofdm_init_mbsfn_(srsran_ofdm_t* q, srsran_ofdm_cfg_t* cfg, srsran_dft
   // Zero temporal and input buffers always
   srsran_vec_cf_zero(q->tmp, q->sf_sz);
 
-  if (dir == SRSRAN_DFT_BACKWARD) {
-    srsran_vec_cf_zero(in_buffer, SRSRAN_SF_LEN_RE(nof_prb, cp));
-  } else {
-    srsran_vec_cf_zero(in_buffer, q->sf_sz);
+  // Frederik
+  // original:
+  // if (dir == SRSRAN_DFT_BACKWARD) {
+  //   srsran_vec_cf_zero(in_buffer, SRSRAN_SF_LEN_RE(nof_prb, cp));
+  // } else {
+  //   srsran_vec_cf_zero(in_buffer, q->sf_sz);
+  // }
+  // new:
+  for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+    if (dir == SRSRAN_DFT_BACKWARD) {
+      srsran_vec_cf_zero(in_buffer[i], SRSRAN_SF_LEN_RE(nof_prb, cp));
+    } else {
+      srsran_vec_cf_zero(in_buffer[i], q->sf_sz);
+    }
   }
+  //
 
   for (int slot = 0; slot < SRSRAN_NOF_SLOTS_PER_SF; slot++) {
     // If Guru DFT was allocated, free
@@ -183,19 +194,38 @@ static int ofdm_init_mbsfn_(srsran_ofdm_t* q, srsran_ofdm_cfg_t* cfg, srsran_dft
 
     // Create Tx/Rx plans
     if (dir == SRSRAN_DFT_FORWARD) {
-      if (srsran_dft_plan_guru_c(&q->fft_plan_sf[slot],
+      // Frederik
+      // original:
+      // if (srsran_dft_plan_guru_c(&q->fft_plan_sf[slot],
+      //                            symbol_sz,
+      //                            dir,
+      //                            in_buffer + cp1 + q->slot_sz * slot - q->window_offset_n,
+      //                            q->tmp,
+      //                            1,
+      //                            1,
+      //                            SRSRAN_CP_NSYMB(cp),
+      //                            symbol_sz + cp2,
+      //                            symbol_sz)) {
+      //   ERROR("Creating Guru DFT plan (%d)", slot);
+      //   return SRSRAN_ERROR;
+      // }
+      // new:
+      for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+        if (srsran_dft_plan_guru_c(&q->fft_plan_sf[slot],
                                  symbol_sz,
                                  dir,
-                                 in_buffer + cp1 + q->slot_sz * slot - q->window_offset_n,
+                                 in_buffer[i] + cp1 + q->slot_sz * slot - q->window_offset_n,
                                  q->tmp,
                                  1,
                                  1,
                                  SRSRAN_CP_NSYMB(cp),
                                  symbol_sz + cp2,
                                  symbol_sz)) {
-        ERROR("Creating Guru DFT plan (%d)", slot);
-        return SRSRAN_ERROR;
+          ERROR("Creating Guru DFT plan (%d)", slot);
+          return SRSRAN_ERROR;
+        }
       }
+      //
     } else {
       if (srsran_dft_plan_guru_c(&q->fft_plan_sf[slot],
                                  symbol_sz,
@@ -276,13 +306,24 @@ void srsran_ofdm_free_(srsran_ofdm_t* q)
   SRSRAN_MEM_ZERO(q, srsran_ofdm_t, 1);
 }
 
-int srsran_ofdm_rx_init(srsran_ofdm_t* q, srsran_cp_t cp, cf_t* in_buffer, cf_t* out_buffer, uint32_t max_prb)
+// Frederik
+// original:
+// int srsran_ofdm_rx_init(srsran_ofdm_t* q, srsran_cp_t cp, cf_t* in_buffer, cf_t* out_buffer, uint32_t max_prb)
+// new:
+int srsran_ofdm_rx_init(srsran_ofdm_t* q, srsran_cp_t cp, cf_t* in_buffer[SRSRAN_MAX_PORTS], cf_t* out_buffer, uint32_t max_prb)
 {
   bzero(q, sizeof(srsran_ofdm_t));
 
   srsran_ofdm_cfg_t cfg = {};
   cfg.cp                = cp;
-  cfg.in_buffer         = in_buffer;
+  // Frederik
+  // orginal:
+  // cfg.in_buffer         = in_buffer;
+  // new:
+  for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+    cfg.in_buffer[i]         = in_buffer[i];
+  }
+  //
   cfg.out_buffer        = out_buffer;
   cfg.nof_prb           = max_prb;
   cfg.sf_type           = SRSRAN_SF_NORM;
@@ -290,13 +331,15 @@ int srsran_ofdm_rx_init(srsran_ofdm_t* q, srsran_cp_t cp, cf_t* in_buffer, cf_t*
   return ofdm_init_mbsfn_(q, &cfg, SRSRAN_DFT_FORWARD);
 }
 
-int srsran_ofdm_rx_init_mbsfn(srsran_ofdm_t* q, srsran_cp_t cp, cf_t* in_buffer, cf_t* out_buffer, uint32_t max_prb)
+int srsran_ofdm_rx_init_mbsfn(srsran_ofdm_t* q, srsran_cp_t cp, cf_t* in_buffer[SRSRAN_MAX_PORTS], cf_t* out_buffer, uint32_t max_prb)
 {
   bzero(q, sizeof(srsran_ofdm_t));
 
   srsran_ofdm_cfg_t cfg = {};
   cfg.cp                = cp;
-  cfg.in_buffer         = in_buffer;
+  for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+    cfg.in_buffer[i]         = in_buffer[i];
+  }
   cfg.out_buffer        = out_buffer;
   cfg.nof_prb           = max_prb;
   cfg.sf_type           = SRSRAN_SF_MBSFN;
@@ -310,7 +353,9 @@ int srsran_ofdm_tx_init(srsran_ofdm_t* q, srsran_cp_t cp, cf_t* in_buffer, cf_t*
 
   srsran_ofdm_cfg_t cfg = {};
   cfg.cp                = cp;
-  cfg.in_buffer         = in_buffer;
+  for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+    cfg.in_buffer[i]         = in_buffer;
+  }
   cfg.out_buffer        = out_buffer;
   cfg.nof_prb           = max_prb;
   cfg.sf_type           = SRSRAN_SF_NORM;
@@ -338,7 +383,9 @@ int srsran_ofdm_tx_init_mbsfn(srsran_ofdm_t* q, srsran_cp_t cp, cf_t* in_buffer,
 
   srsran_ofdm_cfg_t cfg = {};
   cfg.cp                = cp;
-  cfg.in_buffer         = in_buffer;
+  for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+    cfg.in_buffer[i]         = in_buffer;
+  }
   cfg.out_buffer        = out_buffer;
   cfg.nof_prb           = nof_prb;
   cfg.sf_type           = SRSRAN_SF_MBSFN;
@@ -559,14 +606,18 @@ void srsran_ofdm_rx_slot_zerocopy(srsran_ofdm_t* q, cf_t* input, cf_t* output)
 void srsran_ofdm_rx_sf(srsran_ofdm_t* q)
 {
   if (isnormal(q->cfg.freq_shift_f)) {
-    srsran_vec_prod_ccc(q->cfg.in_buffer, q->shift_buffer, q->cfg.in_buffer, q->sf_sz);
+    for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+      srsran_vec_prod_ccc(q->cfg.in_buffer[i], q->shift_buffer, q->cfg.in_buffer[i], q->sf_sz);
+    }
   }
   if (!q->mbsfn_subframe) {
     for (uint32_t n = 0; n < SRSRAN_NOF_SLOTS_PER_SF; n++) {
       ofdm_rx_slot(q, n);
     }
   } else {
-    ofdm_rx_slot_mbsfn(q, q->cfg.in_buffer, q->cfg.out_buffer);
+    for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+      ofdm_rx_slot_mbsfn(q, q->cfg.in_buffer[i], q->cfg.out_buffer);
+    }
     ofdm_rx_slot(q, 1);
   }
 }
@@ -582,7 +633,9 @@ void srsran_ofdm_rx_sf_ng(srsran_ofdm_t* q, cf_t* input, cf_t* output)
       srsran_ofdm_rx_slot_ng(q, &input[n * q->slot_sz], &output[n * q->nof_re * q->nof_symbols]);
     }
   } else {
-    ofdm_rx_slot_mbsfn(q, q->cfg.in_buffer, q->cfg.out_buffer);
+    for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+      ofdm_rx_slot_mbsfn(q, q->cfg.in_buffer[i], q->cfg.out_buffer);
+    }
     ofdm_rx_slot(q, 1);
   }
 }
@@ -595,7 +648,10 @@ static void ofdm_tx_slot(srsran_ofdm_t* q, int slot_in_sf)
   uint32_t    symbol_sz = q->cfg.symbol_sz;
   srsran_cp_t cp        = q->cfg.cp;
 
-  cf_t* input  = q->cfg.in_buffer + slot_in_sf * q->nof_re * q->nof_symbols;
+  cf_t* input[SRSRAN_MAX_PORTS];
+  for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+    input[i]  = q->cfg.in_buffer[i] + slot_in_sf * q->nof_re * q->nof_symbols;
+  }
   cf_t* output = q->cfg.out_buffer + slot_in_sf * q->slot_sz;
 
 #ifdef AVOID_GURU
@@ -617,12 +673,14 @@ static void ofdm_tx_slot(srsran_ofdm_t* q, int slot_in_sf)
   bzero(tmp, q->slot_sz);
   uint32_t dc = (q->fft_plan.dc) ? 1 : 0;
 
-  for (int i = 0; i < nof_symbols; i++) {
-    srsran_vec_cf_copy(&tmp[dc], &input[nof_re / 2], nof_re / 2);
-    srsran_vec_cf_copy(&tmp[symbol_sz - nof_re / 2], &input[0], nof_re / 2);
+  for (int k = 0; k < SRSRAN_MAX_PORTS; k++) {
+    for (int i = 0; i < nof_symbols; i++) {
+      srsran_vec_cf_copy(&tmp[dc], &(input[k])[nof_re / 2], nof_re / 2);
+      srsran_vec_cf_copy(&tmp[symbol_sz - nof_re / 2], &(input[k])[0], nof_re / 2);
 
-    input += nof_re;
-    tmp += symbol_sz;
+      input[k] += nof_re;
+      tmp += symbol_sz;
+    }
   }
 
   srsran_dft_run_guru_c(&q->fft_plan_sf[slot_in_sf]);
@@ -689,7 +747,7 @@ void srsran_ofdm_tx_sf(srsran_ofdm_t* q)
       ofdm_tx_slot(q, n);
     }
   } else {
-    ofdm_tx_slot_mbsfn(q, q->cfg.in_buffer, q->cfg.out_buffer);
+    ofdm_tx_slot_mbsfn(q, q->cfg.in_buffer[0], q->cfg.out_buffer);
     ofdm_tx_slot(q, 1);
   }
   if (isnormal(q->cfg.freq_shift_f)) {
diff --git a/srsRAN/lib/src/phy/dft/test/ofdm_test.c b/srsRAN/lib/src/phy/dft/test/ofdm_test.c
index a09b9bf..724fe51 100644
--- a/srsRAN/lib/src/phy/dft/test/ofdm_test.c
+++ b/srsRAN/lib/src/phy/dft/test/ofdm_test.c
@@ -129,7 +129,9 @@ int main(int argc, char** argv)
 
     srsran_ofdm_cfg_t ofdm_cfg     = {};
     ofdm_cfg.cp                    = cp;
-    ofdm_cfg.in_buffer             = input;
+    for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+      ofdm_cfg.in_buffer[i]             = input;
+    }
     ofdm_cfg.out_buffer            = outifft;
     ofdm_cfg.nof_prb               = n_prb;
     ofdm_cfg.symbol_sz             = symbol_sz;
@@ -141,7 +143,9 @@ int main(int argc, char** argv)
       exit(-1);
     }
 
-    ofdm_cfg.in_buffer        = outifft;
+    for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+      ofdm_cfg.in_buffer[i]        = outifft;
+    }
     ofdm_cfg.out_buffer       = outfft;
     ofdm_cfg.rx_window_offset = rx_window_offset;
     ofdm_cfg.freq_shift_f     = -freq_shift_f;
diff --git a/srsRAN/lib/src/phy/enb/enb_dl.c b/srsRAN/lib/src/phy/enb/enb_dl.c
index 5d219bd..7d19469 100644
--- a/srsRAN/lib/src/phy/enb/enb_dl.c
+++ b/srsRAN/lib/src/phy/enb/enb_dl.c
@@ -58,7 +58,9 @@ int srsran_enb_dl_init(srsran_enb_dl_t* q, cf_t* out_buffer[SRSRAN_MAX_PORTS], u
     ofdm_cfg.nof_prb           = max_prb;
     ofdm_cfg.cp                = SRSRAN_CP_EXT;
     ofdm_cfg.normalize         = false;
-    ofdm_cfg.in_buffer         = q->sf_symbols[0];
+    for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+      ofdm_cfg.in_buffer[i]         = q->sf_symbols[0];
+    }
     ofdm_cfg.out_buffer        = out_buffer[0];
     ofdm_cfg.sf_type           = SRSRAN_SF_MBSFN;
     if (srsran_ofdm_tx_init_cfg(&q->ifft_mbsfn, &ofdm_cfg)) {
@@ -157,7 +159,7 @@ int srsran_enb_dl_set_cell(srsran_enb_dl_t* q, srsran_cell_t cell)
       ofdm_cfg.cp                = cell.cp;
       ofdm_cfg.normalize         = false;
       for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
-        ofdm_cfg.in_buffer  = q->sf_symbols[i];
+        ofdm_cfg.in_buffer[0]  = q->sf_symbols[i];
         ofdm_cfg.out_buffer = q->out_buffer[i];
         ofdm_cfg.sf_type    = SRSRAN_SF_NORM;
         ofdm_cfg.cfr_tx_cfg = q->cfr_config;
@@ -449,16 +451,16 @@ void srsran_enb_dl_gen_signal(srsran_enb_dl_t* q)
 
   // First apply the amplitude normalization, then perform the IFFT and optional CFR reduction
   if (q->dl_sf.sf_type == SRSRAN_SF_MBSFN) {
-    srsran_vec_sc_prod_cfc(q->ifft_mbsfn.cfg.in_buffer,
+    srsran_vec_sc_prod_cfc(q->ifft_mbsfn.cfg.in_buffer[0],
                            norm_factor,
-                           q->ifft_mbsfn.cfg.in_buffer,
+                           q->ifft_mbsfn.cfg.in_buffer[0],
                            SRSRAN_NOF_SLOTS_PER_SF * q->cell.nof_prb * SRSRAN_NRE * SRSRAN_CP_NSYMB(q->cell.cp));
     srsran_ofdm_tx_sf(&q->ifft_mbsfn);
   } else {
     for (int i = 0; i < q->cell.nof_ports; i++) {
-      srsran_vec_sc_prod_cfc(q->ifft[i].cfg.in_buffer,
+      srsran_vec_sc_prod_cfc(q->ifft[i].cfg.in_buffer[0],
                              norm_factor,
-                             q->ifft[i].cfg.in_buffer,
+                             q->ifft[i].cfg.in_buffer[0],
                              SRSRAN_NOF_SLOTS_PER_SF * q->cell.nof_prb * SRSRAN_NRE * SRSRAN_CP_NSYMB(q->cell.cp));
       srsran_ofdm_tx_sf(&q->ifft[i]);
     }
diff --git a/srsRAN/lib/src/phy/gnb/gnb_dl.c b/srsRAN/lib/src/phy/gnb/gnb_dl.c
index 393fc6e..a0488e8 100644
--- a/srsRAN/lib/src/phy/gnb/gnb_dl.c
+++ b/srsRAN/lib/src/phy/gnb/gnb_dl.c
@@ -88,7 +88,9 @@ int srsran_gnb_dl_init(srsran_gnb_dl_t* q, cf_t* output[SRSRAN_MAX_PORTS], const
 
   // Initialise a different OFDM modulator per channel
   for (uint32_t i = 0; i < q->nof_tx_antennas; i++) {
-    fft_cfg.in_buffer  = q->sf_symbols[i];
+    for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+      fft_cfg.in_buffer[0] = q->sf_symbols[i];
+    }
     fft_cfg.out_buffer = output[i];
     srsran_ofdm_tx_init_cfg(&q->fft[i], &fft_cfg);
   }
@@ -162,7 +164,9 @@ int srsran_gnb_dl_set_carrier(srsran_gnb_dl_t* q, const srsran_carrier_nr_t* car
     fft_cfg.phase_compensation_hz = carrier->dl_center_frequency_hz;
 
     for (uint32_t i = 0; i < q->nof_tx_antennas; i++) {
-      fft_cfg.in_buffer = q->sf_symbols[i];
+      for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+        fft_cfg.in_buffer[0] = q->sf_symbols[i];
+      }
       srsran_ofdm_tx_init_cfg(&q->fft[i], &fft_cfg);
     }
   }
diff --git a/srsRAN/lib/src/phy/gnb/gnb_ul.c b/srsRAN/lib/src/phy/gnb/gnb_ul.c
index ab759bd..cab63ff 100644
--- a/srsRAN/lib/src/phy/gnb/gnb_ul.c
+++ b/srsRAN/lib/src/phy/gnb/gnb_ul.c
@@ -87,7 +87,9 @@ int srsran_gnb_ul_init(srsran_gnb_ul_t* q, cf_t* input, const srsran_gnb_ul_args
 
   srsran_ofdm_cfg_t ofdm_cfg = {};
   ofdm_cfg.nof_prb           = args->nof_max_prb;
-  ofdm_cfg.in_buffer         = input;
+  for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+    ofdm_cfg.in_buffer[i]         = input;
+  }
   ofdm_cfg.out_buffer        = q->sf_symbols[0];
   ofdm_cfg.rx_window_offset  = GNB_UL_NR_FFT_WINDOW_OFFSET;
   ofdm_cfg.symbol_sz         = srsran_min_symbol_sz_rb(args->nof_max_prb);
diff --git a/srsRAN/lib/src/phy/phch/test/npbch_file_test.c b/srsRAN/lib/src/phy/phch/test/npbch_file_test.c
index 09fea16..a102ad0 100644
--- a/srsRAN/lib/src/phy/phch/test/npbch_file_test.c
+++ b/srsRAN/lib/src/phy/phch/test/npbch_file_test.c
@@ -151,11 +151,13 @@ int base_init()
     fprintf(stderr, "Error setting equalizer cell configuration\n");
     return -1;
   }
-
-  if (srsran_ofdm_rx_init(&fft, cell.base.cp, input_buffer, fft_buffer, cell.base.nof_prb)) {
+  // Frederik
+  cf_t* input_buffer_[SRSRAN_MAX_PORTS] = {input_buffer, input_buffer, input_buffer, input_buffer};
+  if (srsran_ofdm_rx_init(&fft, cell.base.cp, input_buffer_, fft_buffer, cell.base.nof_prb)) {
     fprintf(stderr, "Error initializing FFT\n");
     return -1;
   }
+  //
   srsran_ofdm_set_freq_shift(&fft, SRSRAN_NBIOT_FREQ_SHIFT_FACTOR);
 
   if (srsran_npbch_init(&npbch)) {
diff --git a/srsRAN/lib/src/phy/phch/test/npdcch_file_test.c b/srsRAN/lib/src/phy/phch/test/npdcch_file_test.c
index c912c8e..d7c75e0 100644
--- a/srsRAN/lib/src/phy/phch/test/npdcch_file_test.c
+++ b/srsRAN/lib/src/phy/phch/test/npdcch_file_test.c
@@ -163,10 +163,13 @@ int main(int argc, char** argv)
     goto quit;
   }
 
-  if (srsran_ofdm_rx_init(&fft, cell.base.cp, input_buffer, fft_buffer, cell.base.nof_prb)) {
+  // Frederik
+  cf_t* input_buffer_[SRSRAN_MAX_PORTS] = {input_buffer, input_buffer, input_buffer, input_buffer};
+  if (srsran_ofdm_rx_init(&fft, cell.base.cp, input_buffer_, fft_buffer, cell.base.nof_prb)) {
     fprintf(stderr, "Error initializing FFT\n");
     goto quit;
   }
+  //
   srsran_ofdm_set_freq_shift(&fft, SRSRAN_NBIOT_FREQ_SHIFT_FACTOR);
 
   if (srsran_npdcch_init(&npdcch)) {
diff --git a/srsRAN/lib/src/phy/phch/test/npdsch_test.c b/srsRAN/lib/src/phy/phch/test/npdsch_test.c
index c5d92e2..adfdf21 100644
--- a/srsRAN/lib/src/phy/phch/test/npdsch_test.c
+++ b/srsRAN/lib/src/phy/phch/test/npdsch_test.c
@@ -349,7 +349,10 @@ int coding_test(int argc, char** argv)
   }
 
   srsran_ofdm_tx_init(&ofdm_tx, cell.base.cp, slot_symbols[0], sf_symbols, cell.base.nof_prb);
-  srsran_ofdm_rx_init(&ofdm_rx, cell.base.cp, sf_symbols, slot_symbols[0], cell.base.nof_prb);
+  // Frederik
+  cf_t* sf_symbols_[SRSRAN_MAX_PORTS] = {sf_symbols, sf_symbols, sf_symbols, sf_symbols};
+  srsran_ofdm_rx_init(&ofdm_rx, cell.base.cp, sf_symbols_, slot_symbols[0], cell.base.nof_prb);
+  //
 
   if (srsran_npdsch_init(&npdsch)) {
     fprintf(stderr, "Error creating NPDSCH object\n");
diff --git a/srsRAN/lib/src/phy/phch/test/pbch_file_test.c b/srsRAN/lib/src/phy/phch/test/pbch_file_test.c
index 64439eb..76f8e52 100644
--- a/srsRAN/lib/src/phy/phch/test/pbch_file_test.c
+++ b/srsRAN/lib/src/phy/phch/test/pbch_file_test.c
@@ -135,11 +135,13 @@ int base_init()
     ERROR("Error initializing equalizer");
     return -1;
   }
-
-  if (srsran_ofdm_rx_init(&fft, cell.cp, input_buffer, fft_buffer[0], cell.nof_prb)) {
+  // Frederik
+  cf_t* input_buffer_[SRSRAN_MAX_PORTS] = {input_buffer, input_buffer, input_buffer, input_buffer};
+  if (srsran_ofdm_rx_init(&fft, cell.cp, input_buffer_, fft_buffer[0], cell.nof_prb)) {
     ERROR("Error initializing FFT");
     return -1;
   }
+  //
 
   if (srsran_pbch_init(&pbch)) {
     ERROR("Error initiating PBCH");
diff --git a/srsRAN/lib/src/phy/phch/test/pcfich_file_test.c b/srsRAN/lib/src/phy/phch/test/pcfich_file_test.c
index 303b829..fa5b46f 100644
--- a/srsRAN/lib/src/phy/phch/test/pcfich_file_test.c
+++ b/srsRAN/lib/src/phy/phch/test/pcfich_file_test.c
@@ -147,12 +147,14 @@ int base_init()
     ERROR("Error initializing equalizer");
     return -1;
   }
-
-  if (srsran_ofdm_rx_init(&fft, cell.cp, input_buffer, fft_buffer[0], cell.nof_prb)) {
+  // Frederik
+  cf_t* input_buffer_[SRSRAN_MAX_PORTS] = {input_buffer, input_buffer, input_buffer, input_buffer};
+  if (srsran_ofdm_rx_init(&fft, cell.cp, input_buffer_, fft_buffer[0], cell.nof_prb)) {
     ERROR("Error initializing FFT");
     return -1;
   }
-
+  //
+  
   if (srsran_regs_init(&regs, cell)) {
     ERROR("Error initiating REGs");
     return -1;
diff --git a/srsRAN/lib/src/phy/phch/test/pdcch_file_test.c b/srsRAN/lib/src/phy/phch/test/pdcch_file_test.c
index 9ebe850..3beb2e4 100644
--- a/srsRAN/lib/src/phy/phch/test/pdcch_file_test.c
+++ b/srsRAN/lib/src/phy/phch/test/pdcch_file_test.c
@@ -151,11 +151,13 @@ int base_init()
     ERROR("Error initializing equalizer");
     return -1;
   }
-
-  if (srsran_ofdm_rx_init(&fft, cell.cp, input_buffer, fft_buffer[0], cell.nof_prb)) {
+  // Frederik
+  cf_t* input_buffer_[SRSRAN_MAX_PORTS] = {input_buffer, input_buffer, input_buffer, input_buffer};
+  if (srsran_ofdm_rx_init(&fft, cell.cp, input_buffer_, fft_buffer[0], cell.nof_prb)) {
     ERROR("Error initializing FFT");
     return -1;
   }
+  //
 
   if (srsran_regs_init(&regs, cell)) {
     ERROR("Error initiating regs");
diff --git a/srsRAN/lib/src/phy/phch/test/phich_file_test.c b/srsRAN/lib/src/phy/phch/test/phich_file_test.c
index b0e67db..e800103 100644
--- a/srsRAN/lib/src/phy/phch/test/phich_file_test.c
+++ b/srsRAN/lib/src/phy/phch/test/phich_file_test.c
@@ -168,11 +168,13 @@ int base_init()
     ERROR("Error initializing equalizer");
     return -1;
   }
-
-  if (srsran_ofdm_rx_init(&fft, cell.cp, input_buffer, fft_buffer[0], cell.nof_prb)) {
+  // Frederik
+  cf_t* input_buffer_[SRSRAN_MAX_PORTS] = {input_buffer, input_buffer, input_buffer, input_buffer};
+  if (srsran_ofdm_rx_init(&fft, cell.cp, input_buffer_, fft_buffer[0], cell.nof_prb)) {
     ERROR("Error initializing FFT");
     return -1;
   }
+  //
 
   if (srsran_regs_init(&regs, cell)) {
     ERROR("Error initiating regs");
diff --git a/srsRAN/lib/src/phy/phch/test/pmch_test.c b/srsRAN/lib/src/phy/phch/test/pmch_test.c
index 09d130e..bd7a11e 100644
--- a/srsRAN/lib/src/phy/phch/test/pmch_test.c
+++ b/srsRAN/lib/src/phy/phch/test/pmch_test.c
@@ -217,10 +217,13 @@ int main(int argc, char** argv)
   for (i = 0; i < nof_rx_antennas; i++) {
     rx_sf_symbols[i] = srsran_vec_cf_malloc(SRSRAN_SF_LEN_PRB(cell.nof_prb));
     srsran_vec_cf_zero(rx_sf_symbols[i], SRSRAN_SF_LEN_PRB(cell.nof_prb));
-    if (srsran_ofdm_rx_init_mbsfn(&fft_mbsfn[i], SRSRAN_CP_EXT, rx_sf_symbols[i], rx_slot_symbols[i], cell.nof_prb)) {
+    // Frederik
+    cf_t* rx_sf_symbols_[SRSRAN_MAX_PORTS] = {rx_sf_symbols[i], rx_sf_symbols[i], rx_sf_symbols[i], rx_sf_symbols[i]};
+    if (srsran_ofdm_rx_init_mbsfn(&fft_mbsfn[i], SRSRAN_CP_EXT, rx_sf_symbols_, rx_slot_symbols[i], cell.nof_prb)) {
       ERROR("Error creating iFFT object");
       exit(-1);
     }
+    //
 
     srsran_ofdm_set_non_mbsfn_region(&fft_mbsfn[i], non_mbsfn_region);
     srsran_ofdm_set_normalize(&fft_mbsfn[i], true);
diff --git a/srsRAN/lib/src/phy/phch/test/psbch_file_test.c b/srsRAN/lib/src/phy/phch/test/psbch_file_test.c
index f885988..7a59116 100644
--- a/srsRAN/lib/src/phy/phch/test/psbch_file_test.c
+++ b/srsRAN/lib/src/phy/phch/test/psbch_file_test.c
@@ -143,10 +143,13 @@ int main(int argc, char** argv)
 
   // RX
   srsran_ofdm_t fft;
-  if (srsran_ofdm_rx_init(&fft, cell.cp, input_buffer, sf_buffer, cell.nof_prb)) {
+  // Frederik
+  cf_t* input_buffer_[SRSRAN_MAX_PORTS] = {input_buffer, input_buffer, input_buffer, input_buffer};
+  if (srsran_ofdm_rx_init(&fft, cell.cp, input_buffer_, sf_buffer, cell.nof_prb)) {
     fprintf(stderr, "Error creating FFT object\n");
     return SRSRAN_ERROR;
   }
+  //
   srsran_ofdm_set_normalize(&fft, true);
   srsran_ofdm_set_freq_shift(&fft, -0.5);
 
diff --git a/srsRAN/lib/src/phy/phch/test/pssch_pscch_file_test.c b/srsRAN/lib/src/phy/phch/test/pssch_pscch_file_test.c
index 99bdc2d..4bf24c7 100644
--- a/srsRAN/lib/src/phy/phch/test/pssch_pscch_file_test.c
+++ b/srsRAN/lib/src/phy/phch/test/pssch_pscch_file_test.c
@@ -199,11 +199,13 @@ int base_init()
     ERROR("Invalid input file name");
     return SRSRAN_ERROR;
   }
-
-  if (srsran_ofdm_rx_init(&fft, cell.cp, input_buffer, sf_buffer, cell.nof_prb)) {
+  // Frederik
+  cf_t* input_buffer_[SRSRAN_MAX_PORTS] = {input_buffer, input_buffer, input_buffer, input_buffer};
+  if (srsran_ofdm_rx_init(&fft, cell.cp, input_buffer_, sf_buffer, cell.nof_prb)) {
     fprintf(stderr, "Error creating FFT object\n");
     return SRSRAN_ERROR;
   }
+  //
   srsran_ofdm_set_normalize(&fft, true);
   srsran_ofdm_set_freq_shift(&fft, -0.5);
 
diff --git a/srsRAN/lib/src/phy/ue/ue_dl.c b/srsRAN/lib/src/phy/ue/ue_dl.c
index 378b8f9..cf8faa4 100644
--- a/srsRAN/lib/src/phy/ue/ue_dl.c
+++ b/srsRAN/lib/src/phy/ue/ue_dl.c
@@ -91,7 +91,7 @@ int srsran_ue_dl_init(srsran_ue_dl_t* q, cf_t* in_buffer[SRSRAN_MAX_PORTS], uint
     ofdm_cfg.rx_window_offset  = 0.0f;
     ofdm_cfg.normalize         = false;
     for (int i = 0; i < nof_rx_antennas; i++) {
-      ofdm_cfg.in_buffer  = in_buffer[i];
+      ofdm_cfg.in_buffer[0]  = in_buffer[i];
       ofdm_cfg.out_buffer = q->sf_symbols[i];
       ofdm_cfg.sf_type    = SRSRAN_SF_NORM;
 
@@ -101,7 +101,7 @@ int srsran_ue_dl_init(srsran_ue_dl_t* q, cf_t* in_buffer[SRSRAN_MAX_PORTS], uint
       }
     }
 
-    ofdm_cfg.in_buffer  = in_buffer[0];
+    ofdm_cfg.in_buffer[0]  = in_buffer[0];
     ofdm_cfg.out_buffer = q->sf_symbols[0];
     ofdm_cfg.sf_type    = SRSRAN_SF_MBSFN;
     if (srsran_ofdm_rx_init_cfg(&q->fft_mbsfn, &ofdm_cfg)) {
diff --git a/srsRAN/lib/src/phy/ue/ue_dl_nbiot.c b/srsRAN/lib/src/phy/ue/ue_dl_nbiot.c
index 67aea6d..535b1ff 100644
--- a/srsRAN/lib/src/phy/ue/ue_dl_nbiot.c
+++ b/srsRAN/lib/src/phy/ue/ue_dl_nbiot.c
@@ -101,7 +101,7 @@ int srsran_nbiot_ue_dl_init(srsran_nbiot_ue_dl_t* q,
     srsran_vec_f_zero(q->llr, q->nof_re * SRSRAN_NPDSCH_MAX_NOF_SF * 2);
 
     // initialize memory
-    if (srsran_ofdm_rx_init(&q->fft, SRSRAN_CP_NORM, in_buffer[0], q->sf_symbols, max_prb)) {
+    if (srsran_ofdm_rx_init(&q->fft, SRSRAN_CP_NORM, in_buffer, q->sf_symbols, max_prb)) {
       fprintf(stderr, "Error initiating FFT\n");
       goto clean_exit;
     }
diff --git a/srsRAN/lib/src/phy/ue/ue_dl_nr.c b/srsRAN/lib/src/phy/ue/ue_dl_nr.c
index 0deceb7..22319dc 100644
--- a/srsRAN/lib/src/phy/ue/ue_dl_nr.c
+++ b/srsRAN/lib/src/phy/ue/ue_dl_nr.c
@@ -101,7 +101,7 @@ int srsran_ue_dl_nr_init(srsran_ue_dl_nr_t* q, cf_t* input[SRSRAN_MAX_PORTS], co
   fft_cfg.rx_window_offset  = UE_DL_NR_FFT_WINDOW_OFFSET;
 
   for (uint32_t i = 0; i < q->nof_rx_antennas; i++) {
-    fft_cfg.in_buffer  = input[i];
+    fft_cfg.in_buffer[0]  = input[i];
     fft_cfg.out_buffer = q->sf_symbols[i];
     srsran_ofdm_rx_init_cfg(&q->fft[i], &fft_cfg);
   }
diff --git a/srsRAN/lib/src/phy/ue/ue_mib.c b/srsRAN/lib/src/phy/ue/ue_mib.c
index d3e9552..9f71344 100644
--- a/srsRAN/lib/src/phy/ue/ue_mib.c
+++ b/srsRAN/lib/src/phy/ue/ue_mib.c
@@ -51,11 +51,13 @@ int srsran_ue_mib_init(srsran_ue_mib_t* q, cf_t* in_buffer, uint32_t max_prb)
       perror("malloc");
       goto clean_exit;
     }
-
-    if (srsran_ofdm_rx_init(&q->fft, SRSRAN_CP_NORM, in_buffer, q->sf_symbols, max_prb)) {
+    // Frederik
+    cf_t* in_buffer_[SRSRAN_MAX_PORTS] = {in_buffer, in_buffer, in_buffer, in_buffer};
+    if (srsran_ofdm_rx_init(&q->fft, SRSRAN_CP_NORM, in_buffer_, q->sf_symbols, max_prb)) {
       ERROR("Error initializing FFT");
       goto clean_exit;
     }
+    //
     if (srsran_chest_dl_init(&q->chest, max_prb, 1)) {
       ERROR("Error initializing reference signal");
       goto clean_exit;
diff --git a/srsRAN/lib/src/phy/ue/ue_mib_nbiot.c b/srsRAN/lib/src/phy/ue/ue_mib_nbiot.c
index 7bf0629..8050df0 100644
--- a/srsRAN/lib/src/phy/ue/ue_mib_nbiot.c
+++ b/srsRAN/lib/src/phy/ue/ue_mib_nbiot.c
@@ -53,7 +53,7 @@ int srsran_ue_mib_nbiot_init(srsran_ue_mib_nbiot_t* q, cf_t** in_buffer, uint32_
       }
     }
 
-    if (srsran_ofdm_rx_init(&q->fft, SRSRAN_CP_NORM, in_buffer[0], q->sf_symbols, max_prb)) {
+    if (srsran_ofdm_rx_init(&q->fft, SRSRAN_CP_NORM, in_buffer, q->sf_symbols, max_prb)) {
       fprintf(stderr, "Error initializing FFT\n");
       goto clean_exit;
     }
diff --git a/srsRAN/lib/src/phy/ue/ue_ul.c b/srsRAN/lib/src/phy/ue/ue_ul.c
index fa4326a..833a214 100644
--- a/srsRAN/lib/src/phy/ue/ue_ul.c
+++ b/srsRAN/lib/src/phy/ue/ue_ul.c
@@ -55,7 +55,9 @@ int srsran_ue_ul_init(srsran_ue_ul_t* q, cf_t* out_buffer, uint32_t max_prb)
 
     srsran_ofdm_cfg_t ofdm_cfg = {};
     ofdm_cfg.nof_prb           = max_prb;
-    ofdm_cfg.in_buffer         = q->sf_symbols;
+    for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+      ofdm_cfg.in_buffer[i]         = q->sf_symbols;
+    }
     ofdm_cfg.out_buffer        = out_buffer;
     ofdm_cfg.cp                = SRSRAN_CP_NORM;
     ofdm_cfg.freq_shift_f      = 0.5f;
diff --git a/srsRAN/lib/src/phy/ue/ue_ul_nr.c b/srsRAN/lib/src/phy/ue/ue_ul_nr.c
index 750326e..2d8ac1f 100644
--- a/srsRAN/lib/src/phy/ue/ue_ul_nr.c
+++ b/srsRAN/lib/src/phy/ue/ue_ul_nr.c
@@ -49,7 +49,9 @@ int srsran_ue_ul_nr_init(srsran_ue_ul_nr_t* q, cf_t* output, const srsran_ue_ul_
   fft_cfg.nof_prb           = args->nof_max_prb;
   fft_cfg.symbol_sz         = srsran_min_symbol_sz_rb(args->nof_max_prb);
   fft_cfg.keep_dc           = true;
-  fft_cfg.in_buffer         = q->sf_symbols[0];
+  for (int i = 0; i < SRSRAN_MAX_PORTS; i++) {
+    fft_cfg.in_buffer[i]         = q->sf_symbols[0];
+  }
   fft_cfg.out_buffer        = output;
   if (srsran_ofdm_tx_init_cfg(&q->ifft, &fft_cfg) < SRSRAN_SUCCESS) {
     ERROR("Initiating OFDM");
diff --git a/srsRAN/lib/test/phy/pucch_ca_test.c b/srsRAN/lib/test/phy/pucch_ca_test.c
index a28b533..d17366e 100644
--- a/srsRAN/lib/test/phy/pucch_ca_test.c
+++ b/srsRAN/lib/test/phy/pucch_ca_test.c
@@ -89,9 +89,12 @@ static int test_pucch_ca(srsran_ack_nack_feedback_mode_t ack_nack_feedback_mode,
   TESTASSERT(!srsran_ue_ul_set_cell(&ue_ul, cell));
 
   // Init eNb
-  TESTASSERT(!srsran_enb_ul_init(&enb_ul, buffer, cell.nof_prb));
+  // Frederik
+  cf_t* buffer_[SRSRAN_MAX_PORTS] = {buffer, buffer, buffer, buffer};
+  TESTASSERT(!srsran_enb_ul_init(&enb_ul, buffer_, cell.nof_prb));
   TESTASSERT(!srsran_enb_ul_set_cell(&enb_ul, cell, &dmrs_pusch_cfg, NULL));
-
+  //
+  
   // The test itself starts here
   for (ul_sf.tti = 0; ul_sf.tti < (1U << (nof_carriers * 2U)); ul_sf.tti++) {
     // Generate new data
diff --git a/srsRAN/srsenb/src/phy/lte/cc_worker.cc b/srsRAN/srsenb/src/phy/lte/cc_worker.cc
index 4b6e9e6..141cd56 100644
--- a/srsRAN/srsenb/src/phy/lte/cc_worker.cc
+++ b/srsRAN/srsenb/src/phy/lte/cc_worker.cc
@@ -139,7 +139,8 @@ void cc_worker::init(phy_common* phy_, uint32_t cc_idx_)
   if (srsran_enb_ul_init(&enb_ul, signal_buffer_rx, nof_prb)) {
     ERROR("Error initiating ENB UL");
     return;
-  // }
+  }
+  //
 
   if (srsran_enb_ul_set_cell(&enb_ul, cell, &phy->dmrs_pusch_cfg, nullptr)) {
     ERROR("Error initiating ENB UL");
